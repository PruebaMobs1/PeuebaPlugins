RecCPrepareModelSomar:
  Skills:
  - variableUnset{var=world.catapultas;t=Integer}
  - setvariable{var=world.catapultas;t=Integer;val=0;save=true}
  - setvariable{var=world.tempPriori;t=Integer;val=0}
#  - skill{s=obtenerNevaVarPriori}

inMortalizarReclutador:
  Skills:
  - skill{s=restarVariabPGlobal} @self
  - delay 40
  - skill{s=RespawnearReclutador} @LivingInWorld

RespawnearReclutador: #En caso peculiar de que el reclutador muera (recordar condicion del hueso en inventario, por ejemplo)
  Conditions:
  - variableEquals{var=world.catapultas;val==>0}
  Skills:
  - summon{type=reclutadorSomarCatapult;amount=1;radius=1} @self

AvisOrdenaVariabP: #variableprioridad
  TargetConditions:
  - isMythicMob true
  - variableisset{s=caster;var=priori}
  Skills:
  - message{m="la variable coincide"}
#  - variablesubtract{}
  - projectile{bullet=block;material=STONE}
  - SudoSkill{s=restarVariabPriFiltrado;setcasterastrigger=true;sync=true}

restarVariabPriFiltrado:
 Conditions:
  - isMythicMob true
  - variableisset{var=target.priori;type=integer}
  - variableInRange{var=caster.priori;value=><trigger.var.priori>}
 Skills:
  - message{m="Me enviaron <trigger.var.priori> y es menor que el mio"} @NearestPlayer
#  - variablesubtract{}
  - projectile{bullet=block;material=STONE} @trigger
  - variablesubtract{var=caster.priori;type=INTEGER;a=1} @Self

restarVariabPGlobal:
#  Conditions:
#  - variableInRange{var=caster.priori;value=>0}
  Skills:
  - variablesubtract{var=world.catapultas;type=INTEGER;a=1} @Self

CrearVarPriori:
  Conditions:
  - variableisset{s=world;var=priori} castInstead ObtenerVarPriori
  Skills:
  - variablesubtract{var=world.catapultas;type=INTEGER;a=1} @Self

obtenerNevaVarPriori:
  Skills:
  - variableadd{var=world.catapultas;t=Integer;a=1}
  - setvariable{var=target.priori;type=INTEGER;value=<world.var.catapultas>}

RotarPrioridad:
  Conditions:
  - variableInRange{var=world.tempPriori;val=<<world.var.catapultas>} orElseCast resetearPriori
  Skills:
  - setvariable{var=skill.tempPriori;type=INTEGER;value=<world.var.tempPriori>+1}
#  - variableadd{var=skill.tempPriori;val=1} 
  - setvariable{var=world.tempPriori;type=INTEGER;value=<world.var.catapultas>+1}
  - delay 60
  - setvariable{var=world.tempPriori;type=INTEGER;value=<skill.var.tempPriori>}
  - msg{m=variableRotada prioridad> <world.var.tempPriori>} @NearestPlayer

SumarPrioridadCondicional: #Solo para cuando hay un valor de 0
  Conditions:
  - variableInRange{var=world.tempPriori;val=0}
  Skills:
  - variableadd{var=world.tempPriori;val=1} @self

resetearPriori:
  Skills:
  - setvariable{var=world.tempPriori;type=INTEGER;value=0}
  - msg{m=variableRotada prioridad> <world.var.tempPriori>} @NearestPlayer
RecCfiltrarDano:
  TriggerConditions:
  - damagecause{c=KILL} false
  Skills:
  - cancelevent


